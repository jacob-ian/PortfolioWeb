rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false 
    }

    function hasAuthorRole() {
      return request.auth.token.author
    }

    function hasAdminRole(){
      return request.auth.token.admin
    }

    match /snippets/{snippetId} {
      allow read;
      allow write: if false;
    }
    
    match /posts/{postId} {
      allow read;
      allow create: if (hasAuthorRole() || hasAdminRole()) && postIsValid();
      allow update: if isPostAuthor(postId) || hasAdminRole();
      allow delete: if isPostAuthor(postId) || hasAdminRole();
    }

    match /posts/{postId}/comments/{commentId} {
      allow read;
      allow create: if request.auth.uid != null;
      allow update: if false;
      allow delete: if isPostAuthor(postId) || isCommentAuthor(postId, commentId) || hasAdminRole();
    }

    match /user/{userId} {
      allow read: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.roles == resource.data.roles;
      allow delete: if isOwner(userId);
    }

    match /emails/{emailId} {
      allow create;
      allow delete; 
    }

    function isPostAuthor(postId) {
      return get(/databases/$(database)/documents/posts/$(postId)).data.author.uid == request.auth.uid;
    }

    function postIsValid(){
      return request.resource.data.id is string && request.resource.data.title is string && request.resource.data.name is string && request.resource.data.href is string && request.resource.data.thumbnail.href is string && request.resource.data.author is map && request.resource.data.author.name is string && request.resource.data.author.uid is string && request.resource.data.author.image.href is string && request.resource.data.description is string && request.resource.data.content is string && request.resource.data.tags is array && request.resource.data.dateCreated is timestamp && request.resource.data.commentCount is number && request.resource.data.section is string
    }

    function isCommentAuthor(postId, commentId) {
      return get(/databases/$(database)/documents/posts/$(postId)/comments/$(commentId)).data.author.uid == request.auth.uid;
    }

    function isOwner(userId) {
      return userId == request.auth.uid
    }
  }
}