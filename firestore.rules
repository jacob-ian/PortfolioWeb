rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false 
    }

    match /posts/{postId} {
      allow read: if true;
      allow create: if hasAuthorRole(request.auth.uid) || hasAdminRole(request.auth.uid);
      allow update: if isAuthor(request.auth.uid, postId) || hasAdminRole(request.auth.uid);
      allow delete: if isAuthor(request.auth.uid, postId) || hasAdminRole(request.auth.uid);
    }

    match /posts/{postId}/comments/{commentId} {
      allow read: if true;
      allow create: if request.auth.uid != null;
      allow delete: if isAuthor(request.auth.uid, postId) || hasAdminRole(request.auth.uid) || isCommenter(request.auth.uid, postId, commentId)
    }

    match /user/{userId} {
      allow write, read: if isOwner(userId);
    }

    function hasAuthorRole(userId) {
      return 'author' in get(/databases/$(database)/documents/users/$(userId)).data.roles;
    }

    function hasAdminRole(userId){
      return 'admin' in get(/databases/$(database)/documents/users/$(userId)).data.roles;
    }

    function isAuthor(userId, postId) {
      return get(/databases/$(database)/documents/posts/$(postId)).data.author.uid == userId;
    }

    function isCommenter(userId, postId, commentId) {
      return get(/databases/$(database)/documents/posts/$(postId)/comments/$(commentId)).data.author.uid == userId;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}